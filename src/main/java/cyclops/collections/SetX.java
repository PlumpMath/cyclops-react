package cyclops.collections;

import com.aol.cyclops2.data.collections.extensions.FluentCollectionX;
import com.aol.cyclops2.data.collections.extensions.lazy.LazySetX;
import com.aol.cyclops2.data.collections.extensions.lazy.immutable.LazyPSetX2;
import cyclops.Converters;
import cyclops.Reducers;
import cyclops.Streams;
import cyclops.collections.immutable.PVectorX;
import cyclops.function.Monoid;
import cyclops.function.Reducer;
import cyclops.stream.ReactiveSeq;
import cyclops.control.Trampoline;
import com.aol.cyclops2.types.OnEmptySwitch;
import com.aol.cyclops2.types.To;
import cyclops.function.Fn3;
import cyclops.function.Fn4;
import cyclops.stream.Spouts;
import org.jooq.lambda.tuple.Tuple2;
import org.jooq.lambda.tuple.Tuple3;
import org.jooq.lambda.tuple.Tuple4;
import org.reactivestreams.Publisher;

import java.util.*;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.TimeUnit;
import java.util.function.*;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static cyclops.stream.ReactiveSeq.ofLongs;


public interface SetX<T> extends To<SetX<T>>,Set<T>, FluentCollectionX<T>, OnEmptySwitch<T, Set<T>> {

    public static void main(String[] args){

   //     SetX<Integer> immutable = SetX.of(1,2,3)
   //                                   .immutable();

        SetX<Integer> persistent = SetX.of(1,2,3)
                                       .persistent();


        SetX<Integer> persistentSet = persistentSet(1,2,3);

        SetX<Integer> mutableSet = persistentSet(1,2,3).mutable();

        SetX<Integer> pset = SetX.of(1,2,3)
                                 .persistent(Reducers.toPSet());

        SetX<Long> longs = persistentSet(ofLongs(10l,20l));

    }

    public static <T> SetX<T> set(final ReactiveSeq<T> it) {

        return new LazySetX<T>(null,it,
                defaultCollector());
    }
    public static <T> SetX<T> persistentSet(final ReactiveSeq<T> it) {

        return new LazySetX<T>(null,it,
                defaultCollector());
    }

    default SetX<T> mutable(){
        return this.withCollector(Collectors.toSet());
    }

    SetX<T> persistent();
    SetX<T> persistent(Reducer<? extends Set<T>> reducer);

    /**
     * Create a SetX that contains the Integers between skip and take
     *
     * @param start
     *            Number of range to skip from
     * @param end
     *            Number for range to take at
     * @return Range SetX
     */
    public static SetX<Integer> range(final int start, final int end) {
        return ReactiveSeq.range(start, end)
                          .toSetX();
    }

    /**
     * Create a SetX that contains the Longs between skip and take
     *
     * @param start
     *            Number of range to skip from
     * @param end
     *            Number for range to take at
     * @return Range SetX
     */
    public static SetX<Long> rangeLong(final long start, final long end) {
        return ReactiveSeq.rangeLong(start, end)
                          .toSetX();
    }

    /**
     * Unfold a function into a SetX
     *
     * <pre>
     * {@code
     *  SetX.unfold(1,i->i<=6 ? Optional.of(Tuple.tuple(i,i+1)) : Optional.empty());
     *
     * //(1,2,3,4,5)
     *
     * }</pre>
     *
     * @param seed Initial value
     * @param unfolder Iteratively applied function, terminated by an empty Optional
     * @return SetX generated by unfolder function
     */
    static <U, T> SetX<T> unfold(final U seed, final Function<? super U, Optional<Tuple2<T, U>>> unfolder) {
        return ReactiveSeq.unfold(seed, unfolder)
                          .toSetX();
    }

    /**
     * Generate a SetX from the provided Supplier up to the provided limit number of times
     *
     * @param limit Max number of elements to generate
     * @param s Supplier to generate SetX elements
     * @return SetX generated from the provided Supplier
     */
    public static <T> SetX<T> generate(final long limit, final Supplier<T> s) {

        return ReactiveSeq.generate(s)
                          .limit(limit)
                          .toSetX();
    }

    /**
     * Create a SetX by iterative application of a function to an initial element up to the supplied limit number of times
     *
     * @param limit Max number of elements to generate
     * @param seed Initial element
     * @param f Iteratively applied to each element to generate the next element
     * @return SetX generated by iterative application
     */
    public static <T> SetX<T> iterate(final long limit, final T seed, final UnaryOperator<T> f) {
        return ReactiveSeq.iterate(seed, f)
                          .limit(limit)
                          .toSetX();

    }

    static <T> Collector<T, ?, SetX<T>> setXCollector() {
        return Collectors.toCollection(() -> SetX.of());
    }

    static <T> Collector<T, ?, Set<T>> defaultCollector() {
        return Collectors.toCollection(() -> new HashSet<>());
    }

    static <T> Collector<T, ?, Set<T>> immutableCollector() {
        return Collectors.collectingAndThen(defaultCollector(), (final Set<T> d) -> Collections.unmodifiableSet(d));

    }

    public static <T> SetX<T> empty() {
        return fromIterable(ReactiveSeq.of());
    }

    @SafeVarargs
    public static <T> SetX<T> of(final T... values) {

        return fromIterable(ReactiveSeq.of(values));
    }
    @SafeVarargs
    public static <T> SetX<T> immutableSet(final T... values) {

        return fromIterable(ReactiveSeq.of(values));
    }
    @SafeVarargs
    public static <T> SetX<T> persistentSet(final T... values) {

        return fromIterable(ReactiveSeq.of(values));
    }
    public static <T> SetX<T> fromIterator(final Iterator<T> it) {
        return fromIterable(()->it);
    }
    public static <T> SetX<T> singleton(final T value) {
        return SetX.<T> of(value);
    }

    /**
     * Construct a SetX from an Publisher
     *
     * @param publisher
     *            to construct SetX from
     * @return SetX
     */
    public static <T> SetX<T> fromPublisher(final Publisher<? extends T> publisher) {
        return Spouts.from((Publisher<T>) publisher)
                          .toSetX();
    }

    public static <T> SetX<T> fromIterable(final Iterable<T> it) {
        if (it instanceof SetX)
            return (SetX) it;
        if (it instanceof Set)
            return new LazySetX<T>(
                                   (Set) it, defaultCollector());
        return new LazySetX<T>(null,
                                ReactiveSeq.fromIterable(it),
                                          defaultCollector());
    }

    public static <T> SetX<T> fromIterable(final Collector<T, ?, Set<T>> collector, final Iterable<T> it) {
        if (it instanceof SetX)
            return ((SetX) it).withCollector(collector);
        if (it instanceof Set)
            return new LazySetX<T>(
                                   (Set) it, collector);
        return new LazySetX<T>(null,
                                ReactiveSeq.fromIterable(it),
                                collector);
    }

    @Override
    SetX<T> materialize();

    @Override
    SetX<T> take(final long num) ;
    @Override
    SetX<T> drop(final long num) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.CollectionX#forEach4(java.util.function.Function, java.util.function.BiFunction, com.aol.cyclops2.util.function.TriFunction, com.aol.cyclops2.util.function.QuadFunction)
     */
    @Override
    default <R1, R2, R3, R> SetX<R> forEach4(Function<? super T, ? extends Iterable<R1>> stream1,
            BiFunction<? super T, ? super R1, ? extends Iterable<R2>> stream2,
            Fn3<? super T, ? super R1, ? super R2, ? extends Iterable<R3>> stream3,
            Fn4<? super T, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {

        return (SetX)FluentCollectionX.super.forEach4(stream1, stream2, stream3, yieldingFunction);
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.CollectionX#forEach4(java.util.function.Function, java.util.function.BiFunction, com.aol.cyclops2.util.function.TriFunction, com.aol.cyclops2.util.function.QuadFunction, com.aol.cyclops2.util.function.QuadFunction)
     */
    @Override
    default <R1, R2, R3, R> SetX<R> forEach4(Function<? super T, ? extends Iterable<R1>> stream1,
            BiFunction<? super T, ? super R1, ? extends Iterable<R2>> stream2,
            Fn3<? super T, ? super R1, ? super R2, ? extends Iterable<R3>> stream3,
            Fn4<? super T, ? super R1, ? super R2, ? super R3, Boolean> filterFunction,
            Fn4<? super T, ? super R1, ? super R2, ? super R3, ? extends R> yieldingFunction) {

        return (SetX)FluentCollectionX.super.forEach4(stream1, stream2, stream3, filterFunction, yieldingFunction);
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.CollectionX#forEach3(java.util.function.Function, java.util.function.BiFunction, com.aol.cyclops2.util.function.TriFunction)
     */
    @Override
    default <R1, R2, R> SetX<R> forEach3(Function<? super T, ? extends Iterable<R1>> stream1,
            BiFunction<? super T, ? super R1, ? extends Iterable<R2>> stream2,
            Fn3<? super T, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return (SetX)FluentCollectionX.super.forEach3(stream1, stream2, yieldingFunction);
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.CollectionX#forEach3(java.util.function.Function, java.util.function.BiFunction, com.aol.cyclops2.util.function.TriFunction, com.aol.cyclops2.util.function.TriFunction)
     */
    @Override
    default <R1, R2, R> SetX<R> forEach3(Function<? super T, ? extends Iterable<R1>> stream1,
            BiFunction<? super T, ? super R1, ? extends Iterable<R2>> stream2,
            Fn3<? super T, ? super R1, ? super R2, Boolean> filterFunction,
            Fn3<? super T, ? super R1, ? super R2, ? extends R> yieldingFunction) {

        return (SetX)FluentCollectionX.super.forEach3(stream1, stream2, filterFunction, yieldingFunction);
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.CollectionX#forEach2(java.util.function.Function, java.util.function.BiFunction)
     */
    @Override
    default <R1, R> SetX<R> forEach2(Function<? super T, ? extends Iterable<R1>> stream1,
            BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {

        return (SetX)FluentCollectionX.super.forEach2(stream1, yieldingFunction);
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.CollectionX#forEach2(java.util.function.Function, java.util.function.BiFunction, java.util.function.BiFunction)
     */
    @Override
    default <R1, R> SetX<R> forEach2(Function<? super T, ? extends Iterable<R1>> stream1,
            BiFunction<? super T, ? super R1, Boolean> filterFunction,
            BiFunction<? super T, ? super R1, ? extends R> yieldingFunction) {

        return (SetX)FluentCollectionX.super.forEach2(stream1, filterFunction, yieldingFunction);
    }

    SetX<T> withCollector(Collector<T, ?, Set<T>> collector);

    /**
     * coflatMap pattern, can be used to perform lazy reductions / collections / folds and other terminal operations
     *
     * <pre>
     * {@code
     *
     *     SetX.of(1,2,3)
     *           .map(i->i*2)
     *           .coflatMap(s -> s.reduce(0,(a,b)->a+b))
     *
     *      //SetX[12]
     * }
     * </pre>
     *
     *
     * @param fn mapping function
     * @return Transformed Set
     */
    default <R> SetX<R> coflatMap(Function<? super SetX<T>, ? extends R> fn){
        return fn.andThen(r ->  this.<R>unit(r))
                  .apply(this);
    }

    /**
     * Combine two adjacent elements in a SetX using the supplied BinaryOperator
     * This is a stateful grouping and reduction operation. The emitted of a combination may in turn be combined
     * with it's neighbor
     * <pre>
     * {@code
     *  SetX.of(1,1,2,3)
                   .combine((a, b)->a.equals(b),Semigroups.intSum)
                   .toListX()

     *  //ListX(3,4)
     * }</pre>
     *
     * @param predicate Test to see if two neighbors should be joined
     * @param op Reducer to combine neighbors
     * @return Combined / Partially Reduced SetX
     */
    @Override
    SetX<T> combine(final BiPredicate<? super T, ? super T> predicate, final BinaryOperator<T> op) ;
    @Override
    SetX<T> combine(final Monoid<T> op, final BiPredicate<? super T, ? super T> predicate);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.sequence.traits.ConvertableSequence#toListX()
     */
    @Override
    default SetX<T> toSetX() {
        return this;
    }

    @Override
    default ReactiveSeq<T> stream() {

        return ReactiveSeq.fromIterable(this);
    }

    @Override
    default <R> SetX<R> unit(final Collection<R> col) {
        return fromIterable(col);
    }

    @Override
    default <R> SetX<R> unit(final R value) {
        return singleton(value);
    }

    @Override
    default <R> SetX<R> unitIterator(final Iterator<R> it) {
        return fromIterable(() -> it);
    }

    @Override
    default <T1> SetX<T1> from(final Collection<T1> c) {
        return SetX.<T1> fromIterable(getCollector(), c);
    }

    public <T> Collector<T, ?, Set<T>> getCollector();


    default <X> SetX<X> fromStream(final Stream<X> stream) {
        return new LazySetX<>(
                              stream.collect(getCollector()), getCollector());
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#reverse()
     */
    @Override
    SetX<T> reverse();

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#filter(java.util.function.Predicate)
     */
    @Override
    SetX<T> filter(final Predicate<? super T> pred);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#map(java.util.function.Function)
     */
    @Override
    <R> SetX<R> map(final Function<? super T, ? extends R> mapper);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#flatMap(java.util.function.Function)
     */
    @Override
    <R> SetX<R> flatMap(final Function<? super T, ? extends Iterable<? extends R>> mapper);
    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#limit(long)
     */
    @Override
    SetX<T> limit(final long num);
    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#skip(long)
     */
    @Override
    SetX<T> skip(final long num);

    @Override
    SetX<T> takeRight(final int num);

    @Override
     SetX<T> dropRight(final int num);
    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#takeWhile(java.util.function.Predicate)
     */
    @Override
    SetX<T> takeWhile(final Predicate<? super T> p);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#dropWhile(java.util.function.Predicate)
     */
    @Override
    default SetX<T> dropWhile(final Predicate<? super T> p);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#takeUntil(java.util.function.Predicate)
     */
    @Override
    default SetX<T> takeUntil(final Predicate<? super T> p) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#dropUntil(java.util.function.Predicate)
     */
    @Override
    default SetX<T> dropUntil(final Predicate<? super T> p) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#trampoline(java.util.function.Function)
     */
    @Override
    default <R> SetX<R> trampoline(final Function<? super T, ? extends Trampoline<? extends R>> mapper) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#slice(long, long)
     */
    @Override
    default SetX<T> slice(final long from, final long to);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#sorted(java.util.function.Function)
     */
    @Override
    default <U extends Comparable<? super U>> SetX<T> sorted(final Function<? super T, ? extends U> function);

    @Override
    default SetX<ListX<T>> grouped(final int groupSize) ;

    @Override
    default <K, A, D> SetX<Tuple2<K, D>> grouped(final Function<? super T, ? extends K> classifier, final Collector<? super T, A, D> downstream) ;

    @Override
    default <K> SetX<Tuple2<K, ReactiveSeq<T>>> grouped(final Function<? super T, ? extends K> classifier);

    @Override
    default <U> SetX<Tuple2<T, U>> zip(final Iterable<? extends U> other) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#zip(java.lang.Iterable, java.util.function.BiFunction)
     */
    @Override
    default <U, R> SetX<R> zip(final Iterable<? extends U> other, final BiFunction<? super T, ? super U, ? extends R> zipper) ;

    @Override
    default <U, R> SetX<R> zipS(final Stream<? extends U> other, final BiFunction<? super T, ? super U, ? extends R> zipper);


    @Override
    default SetX<PVectorX<T>> sliding(final int windowSize) ;

    @Override
    default SetX<PVectorX<T>> sliding(final int windowSize, final int increment);

    @Override
    default SetX<T> scanLeft(final Monoid<T> monoid) ;

    @Override
    default <U> SetX<U> scanLeft(final U seed, final BiFunction<? super U, ? super T, ? extends U> function);

    @Override
    default SetX<T> scanRight(final Monoid<T> monoid) ;

    @Override
    default <U> SetX<U> scanRight(final U identity, final BiFunction<? super T, ? super U, ? extends U> combiner) ;

    @Override
    default SetX<T> plus(final T e) {
        add(e);
        return this;
    }

    @Override
    default SetX<T> plusAll(final Collection<? extends T> list) {
        addAll(list);
        return this;
    }

    @Override
    default SetX<T> minus(final Object e) {
        remove(e);
        return this;
    }

    @Override
    default SetX<T> minusAll(final Collection<?> list) {
        removeAll(list);
        return this;
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#cycle(int)
     */
    @Override
    default ListX<T> cycle(final long times) {

        return this.stream()
                   .cycle(times)
                   .toListX();
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#cycle(com.aol.cyclops2.sequence.Monoid, int)
     */
    @Override
    default ListX<T> cycle(final Monoid<T> m, final long times) {

        return this.stream()
                   .cycle(m, times)
                   .toListX();
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#cycleWhile(java.util.function.Predicate)
     */
    @Override
    default ListX<T> cycleWhile(final Predicate<? super T> predicate) {

        return this.stream()
                   .cycleWhile(predicate)
                   .toListX();
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#cycleUntil(java.util.function.Predicate)
     */
    @Override
    default ListX<T> cycleUntil(final Predicate<? super T> predicate) {

        return this.stream()
                   .cycleUntil(predicate)
                   .toListX();
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#zip(java.util.reactiveStream.Stream)
     */
    @Override
     <U> SetX<Tuple2<T, U>> zipS(final Stream<? extends U> other) ;


    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#zip3(java.util.reactiveStream.Stream, java.util.reactiveStream.Stream)
     */
    @Override
    <S, U> SetX<Tuple3<T, S, U>> zip3(final Iterable<? extends S> second, final Iterable<? extends U> third);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#zip4(java.util.reactiveStream.Stream, java.util.reactiveStream.Stream, java.util.reactiveStream.Stream)
     */
    @Override
     <T2, T3, T4> SetX<Tuple4<T, T2, T3, T4>> zip4(final Iterable<? extends T2> second, final Iterable<? extends T3> third,
            final Iterable<? extends T4> fourth) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#zipWithIndex()
     */
    @Override
     SetX<Tuple2<T, Long>> zipWithIndex() ;
    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#distinct()
     */
    @Override
    SetX<T> distinct() ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#sorted()
     */
    @Override
     SetX<T> sorted();

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#sorted(java.util.Comparator)
     */
    @Override
    SetX<T> sorted(final Comparator<? super T> c);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#skipWhile(java.util.function.Predicate)
     */
    @Override
     SetX<T> skipWhile(final Predicate<? super T> p) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#skipUntil(java.util.function.Predicate)
     */
    @Override
    SetX<T> skipUntil(final Predicate<? super T> p) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#limitWhile(java.util.function.Predicate)
     */
    @Override
    SetX<T> limitWhile(final Predicate<? super T> p) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#limitUntil(java.util.function.Predicate)
     */
    @Override
    SetX<T> limitUntil(final Predicate<? super T> p);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#intersperse(java.lang.Object)
     */
    @Override
    SetX<T> intersperse(final T value) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#shuffle()
     */
    @Override
    SetX<T> shuffle() ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#skipLast(int)
     */
    @Override
    SetX<T> skipLast(final int num) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#limitLast(int)
     */
    @Override
    SetX<T> limitLast(final int num) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.types.OnEmptySwitch#onEmptySwitch(java.util.function.Supplier)
     */
    @Override
    default SetX<T> onEmptySwitch(final Supplier<? extends Set<T>> supplier) {
        if (isEmpty())
            return SetX.fromIterable(supplier.get());
        return this;
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#onEmpty(java.lang.Object)
     */
    @Override
    SetX<T> onEmpty(final T value);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#onEmptyGet(java.util.function.Supplier)
     */
    @Override
    SetX<T> onEmptyGet(final Supplier<? extends T> supplier) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#onEmptyThrow(java.util.function.Supplier)
     */
    @Override
      <X extends Throwable> SetX<T> onEmptyThrow(final Supplier<? extends X> supplier);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#shuffle(java.util.Random)
     */
    @Override
     SetX<T> shuffle(final Random random) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#ofType(java.lang.Class)
     */
    @Override
    default <U> SetX<U> ofType(final Class<? extends U> type) {

        return (SetX<U>) FluentCollectionX.super.ofType(type);
    }

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#filterNot(java.util.function.Predicate)
     */
    @Override
     SetX<T> filterNot(final Predicate<? super T> fn) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#notNull()
     */
    @Override
     SetX<T> notNull() ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#removeAll(java.util.reactiveStream.Stream)
     */
    @Override
     SetX<T> removeAllS(final Stream<? extends T> stream);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#removeAll(java.lang.Iterable)
     */
    @Override
     SetX<T> removeAllI(final Iterable<? extends T> it);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#removeAll(java.lang.Object[])
     */
    @Override
     SetX<T> removeAll(final T... values) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#retainAllI(java.lang.Iterable)
     */
    @Override
     SetX<T> retainAllI(final Iterable<? extends T> it) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#retainAllI(java.util.reactiveStream.Stream)
     */
    @Override
     SetX<T> retainAllS(final Stream<? extends T> seq) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#retainAllI(java.lang.Object[])
     */
    @Override
     SetX<T> retainAll(final T... values) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.collections.extensions.standard.FluentCollectionX#cast(java.lang.Class)
     */
    @Override
    default <U> SetX<U> cast(final Class<? extends U> type) {

        return (SetX<U>) FluentCollectionX.super.cast(type);
    }


    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.standard.FluentCollectionX#grouped(int, java.util.function.Supplier)
     */
    @Override
     <C extends Collection<? super T>> SetX<C> grouped(final int size, final Supplier<C> supplier);

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.standard.FluentCollectionX#groupedUntil(java.util.function.Predicate)
     */
    @Override
     SetX<ListX<T>> groupedUntil(final Predicate<? super T> predicate) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.standard.FluentCollectionX#groupedWhile(java.util.function.Predicate)
     */
    @Override
     SetX<ListX<T>> groupedWhile(final Predicate<? super T> predicate) ;
    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.standard.FluentCollectionX#groupedWhile(java.util.function.Predicate, java.util.function.Supplier)
     */
    @Override
     <C extends Collection<? super T>> SetX<C> groupedWhile(final Predicate<? super T> predicate, final Supplier<C> factory) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.standard.FluentCollectionX#groupedUntil(java.util.function.Predicate, java.util.function.Supplier)
     */
    @Override
     <C extends Collection<? super T>> SetX<C> groupedUntil(final Predicate<? super T> predicate, final Supplier<C> factory) ;

    /* (non-Javadoc)
     * @see com.aol.cyclops2.data.collections.extensions.standard.FluentCollectionX#groupedStatefullyUntil(java.util.function.BiPredicate)
     */
    @Override
     SetX<ListX<T>> groupedStatefullyUntil(final BiPredicate<ListX<? super T>, ? super T> predicate) ;


    @Override
    default <R> SetX<R> retry(final Function<? super T, ? extends R> fn) {
        return (SetX<R>)FluentCollectionX.super.retry(fn);
    }

    @Override
    default <R> SetX<R> retry(final Function<? super T, ? extends R> fn, final int retries, final long delay, final TimeUnit timeUnit) {
        return (SetX<R>)FluentCollectionX.super.retry(fn);
    }

    @Override
    default <R> SetX<R> flatMapS(Function<? super T, ? extends Stream<? extends R>> fn) {
        return (SetX<R>)FluentCollectionX.super.flatMapS(fn);
    }

    @Override
    default <R> SetX<R> flatMapP(Function<? super T, ? extends Publisher<? extends R>> fn) {
        return (SetX<R>)FluentCollectionX.super.flatMapP(fn);
    }

    @Override
    default SetX<T> prependS(Stream<? extends T> stream) {
        return (SetX<T>)FluentCollectionX.super.prependS(stream);
    }

    @Override
    default SetX<T> append(T... values) {
        return (SetX<T>)FluentCollectionX.super.append(values);
    }

    @Override
    default SetX<T> append(T value) {
        return (SetX<T>)FluentCollectionX.super.append(value);
    }

    @Override
    default SetX<T> prepend(T value) {
        return (SetX<T>)FluentCollectionX.super.prepend(value);
    }

    @Override
    default SetX<T> prepend(T... values) {
        return (SetX<T>)FluentCollectionX.super.prepend(values);
    }

    @Override
    default SetX<T> insertAt(int pos, T... values) {
        return (SetX<T>)FluentCollectionX.super.insertAt(pos,values);
    }

    @Override
    default SetX<T> deleteBetween(int start, int end) {
        return (SetX<T>)FluentCollectionX.super.deleteBetween(start,end);
    }

    @Override
    default SetX<T> insertAtS(int pos, Stream<T> stream) {
        return (SetX<T>)FluentCollectionX.super.insertAtS(pos,stream);
    }

    @Override
    default SetX<T> recover(final Function<? super Throwable, ? extends T> fn) {
        return (SetX<T>)FluentCollectionX.super.recover(fn);
    }

    @Override
    default <EX extends Throwable> SetX<T> recover(Class<EX> exceptionClass, final Function<? super EX, ? extends T> fn) {
        return (SetX<T>)FluentCollectionX.super.recover(exceptionClass,fn);
    }

    @Override
    default SetX<T> plusLoop(int max, IntFunction<T> value) {
        return (SetX<T>)FluentCollectionX.super.plusLoop(max,value);
    }

    @Override
    default SetX<T> plusLoop(Supplier<Optional<T>> supplier) {
        return (SetX<T>)FluentCollectionX.super.plusLoop(supplier);
    }

    /**
     * Narrow a covariant Set
     * 
     * <pre>
     * {@code 
     * SetX<? extends Fruit> set = SetX.of(apple,bannana);
     * SetX<Fruit> fruitSet = SetX.narrowK(set);
     * }
     * </pre>
     * 
     * @param setX to narrowK generic type
     * @return SetX with narrowed type
     */
    public static <T> SetX<T> narrow(final SetX<? extends T> setX) {
        return (SetX<T>) setX;
    }

}
